{"version":3,"sources":["components/countryCard/countryCard.component.jsx","components/cardList/cardList.component.jsx","components/search/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["date","Date","CountryCard","country","activeCases","todayCases","totalCases","deaths","todayDeaths","recoveredCases","critical","imageSrc","className","Card","border","style","width","Header","margin","src","alt","Body","Text","color","Footer","getDate","getMonth","getFullYear","missingCountries","CardList","countryData","map","countries","index","key","active","cases","recovered","console","log","undefined","getCode","SearchForm","handleSearch","aria-hidden","onChange","type","placeholder","aria-label","App","e","setState","searchItem","target","value","state","totalDeaths","totalRecovered","updatedTime","fetch","then","response","json","data","updated","unixTimestamp","this","toString","slice","filterData","filter","toLowerCase","includes","paddingRight","unix","length","height","timeout","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gVAIMA,G,MAAO,IAAIC,MAwDFC,EAtDK,SAAC,GAQe,IARdC,EAQa,EARbA,QACDC,EAOc,EAPdA,YACAC,EAMc,EANdA,WACAC,EAKc,EALdA,WACAC,EAIc,EAJdA,OACAC,EAGc,EAHdA,YACAC,EAEc,EAFdA,eACAC,EACc,EADdA,SACAC,EAAc,EAAdA,SACjB,OACI,yBAAKC,UAAU,kBACf,kBAACC,EAAA,EAAD,CAAMC,OAAO,OAAOC,MAAO,CAAEC,MAAO,UAEhC,kBAACH,EAAA,EAAKI,OAAN,KAAcd,GACd,yBAAKY,MAAO,CAACC,MAAO,QAASE,OAAQ,QAASC,IAAMR,EAAWS,IAAI,iBAE/D,kBAACP,EAAA,EAAKQ,KAAN,KACI,kBAACR,EAAA,EAAKS,KAAN,sBACmBlB,GAGnB,kBAACS,EAAA,EAAKS,KAAN,yBACsBb,GAGtB,kBAACI,EAAA,EAAKS,KAAN,mBACgBjB,GAGhB,kBAACQ,EAAA,EAAKS,KAAN,qBACkBhB,GAGlB,kBAACO,EAAA,EAAKS,KAAN,wBACqBZ,GAGrB,kBAACG,EAAA,EAAKS,KAAN,CAAWP,MAAO,CAACQ,MAAM,QAAzB,iBACmBf,GAGnB,kBAACK,EAAA,EAAKS,KAAN,CAAWP,MAAO,CAACQ,MAAM,QAAzB,iBACmBhB,IAIvB,kBAACM,EAAA,EAAKW,OAAN,KACI,kBAACX,EAAA,EAAKW,OAAN,CAAaZ,UAAU,cAAvB,UAAwCZ,EAAKyB,UAA7C,YAA0DzB,EAAK0B,WAAa,EAA5E,YAAiF1B,EAAK2B,cAAtF,U,OChDdC,G,MAAmB,CACrB,KAAS,KACT,WAAa,KACb,IAAQ,KACR,GAAO,KACP,OAAW,KACX,IAAQ,KACR,OAAW,KACX,QAAY,KACZ,OAAW,KACX,mBAAqB,KACrB,iBAAmB,KACnB,UAAc,KACd,QAAY,KACZ,UAAc,KACd,QAAY,KACZ,kBAAoB,KACpB,IAAQ,KACR,cAAgB,KAChB,YAAc,KACd,eAAiB,KACjB,SAAa,KACb,sBAAwB,KACxB,IAAQ,KACR,eAAiB,KACjB,yBAA2B,KAC3B,eAAiB,OAiCNC,EAzBE,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAChB,OACI,yBAAKlB,UAAU,uBAEXkB,EAAYC,KAAI,SAACC,EAAWC,GACxB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACL9B,QAAS6B,EAAU7B,QACnBC,YAAa4B,EAAUG,OACvB9B,WAAY2B,EAAU3B,WACtBC,WAAY0B,EAAUI,MACtB7B,OAAQyB,EAAUzB,OAClBC,YAAawB,EAAUxB,YACvBC,eAAgBuB,EAAUK,UAC1B3B,SAAUsB,EAAUtB,SACpBC,SAAQ,uCArBRR,EAqBoD6B,EAAU7B,QApB9EmC,QAAQC,IAAIX,EAAiBzB,SACDqC,IAArBC,kBAAQtC,GAAyBsC,kBAAQtC,GAAWyB,EAAiBzB,IAmBpD,kBArBT,IAACA,O,iBChBLuC,G,YAdI,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACtB,OAKI,0BAAM/B,UAAU,mFACZ,uBAAGA,UAAU,gBAAgBgC,cAAY,SACzC,2BAAOC,SAAUF,EAAc/B,UAAU,yCAAyCkC,KAAK,OAAOC,YAAY,oBAAoBC,aAAW,c,iBCgFlIC,E,kDAnFb,aAAe,IAAD,8BACZ,gBA4BFN,aAAe,SAACO,GACd,EAAKC,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SA5BpC,EAAKC,MAAQ,CACXzB,YAAa,GACbxB,WAAY,EACZkD,YAAa,EACbC,eAAgB,EAChBC,YAAa,EACbN,WAAY,IARF,E,gEAYO,IAAD,OAClBO,MAAM,0CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKZ,SAAS,CAAErB,YAAaiC,OAE/BJ,MAAM,oCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKZ,SAAS,CAAE7C,WAAYyD,EAAK3B,MACjBoB,YAAaO,EAAKxD,OAClBkD,eAAgBM,EAAK1B,UACrBqB,YAAaK,EAAKC,e,+BAS/B,IAAD,OACAC,EAAgBC,KAAKX,MAAMG,YAAYS,WAAWC,MAAM,GAAI,GAE5DC,EAAaH,KAAKX,MAAMzB,YAAYwC,QAAO,SAAAtC,GAC7C,OAAOA,EAAU7B,QAAQoE,cAAcC,SAAS,EAAKjB,MAAMH,WAAWmB,kBAE1E,OACE,yBAAK3D,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,mBACA,yBAAKA,UAAU,eACf,uBAAGG,MAAO,CAAC0D,aAAc,QAAS7D,UAAU,oBAC5C,kBAAC,IAAD,CAAQ8D,MAAI,GAAET,IAEd,kBAAC,EAAD,CAAYtB,aAAcuB,KAAKvB,gBAEjC,yBAAK/B,UAAU,iBACf,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iBACf,+CACE,4BAAKsD,KAAKX,MAAMjD,aAGlB,yBAAKM,UAAU,iBACb,+CACA,4BAAKsD,KAAKX,MAAME,iBAGlB,yBAAK7C,UAAU,cACb,4CACA,4BAAKsD,KAAKX,MAAMC,gBAOgB,IAAlCU,KAAKX,MAAMzB,YAAY6C,OAAe,kBAAC,IAAD,CAAQ7B,KAAK,YAAYvB,MAAM,OAAOqD,OAAQ,IAAK5D,MAAO,IAAK6D,QAAS,MAC5G,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAUhD,YAAauC,W,GA1EnBU,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.7dcba04e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport \"./countryCard.style.css\";\r\n\r\nconst date = new Date();\r\n\r\nconst CountryCard = ({country,\r\n                     activeCases,\r\n                     todayCases,\r\n                     totalCases,\r\n                     deaths,\r\n                     todayDeaths,\r\n                     recoveredCases,\r\n                     critical,\r\n                     imageSrc}) => {    \r\n    return (\r\n        <div className=\"card-container\">\r\n        <Card border=\"none\" style={{ width: '18rem' }}>\r\n\r\n            <Card.Header>{country}</Card.Header>\r\n            <img style={{width: \"100px\", margin: \"auto\"}} src={ imageSrc } alt=\"Country Flag\" />\r\n\r\n                <Card.Body>\r\n                    <Card.Text >\r\n                        Active Cases: {activeCases}\r\n                    </Card.Text>\r\n\r\n                    <Card.Text>\r\n                        Recovered Cases: {recoveredCases}\r\n                    </Card.Text>\r\n\r\n                    <Card.Text>\r\n                        New Cases: {todayCases}\r\n                    </Card.Text>\r\n\r\n                    <Card.Text>\r\n                        Total Cases: {totalCases}\r\n                    </Card.Text>\r\n\r\n                    <Card.Text>\r\n                        Critical Cases: {critical}\r\n                    </Card.Text>\r\n\r\n                    <Card.Text style={{color:\"red\"}}>\r\n                        Today Deaths: {todayDeaths}\r\n                    </Card.Text>\r\n\r\n                    <Card.Text style={{color:\"red\"}}>\r\n                        Total Deaths: {deaths}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n\r\n                <Card.Footer>\r\n                    <Card.Footer className=\"text-muted\">{`${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} `}</Card.Footer>\r\n                </Card.Footer>\r\n        </Card>    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CountryCard;","import React from 'react';\r\nimport CountryCard from \"../countryCard/countryCard.component\";\r\nimport {getCode} from \"country-list\";\r\nimport \"./cardList.style.css\";\r\n\r\nconst missingCountries = {\r\n    \"Iran\" : \"IR\",\r\n    \"S. Korea\" : \"KR\",\r\n    \"USA\" : \"US\",\r\n    \"UK\" : \"GB\",\r\n    \"Russia\" : \"RU\",\r\n    \"UAE\" : \"AE\",\r\n    \"Taiwan\" : \"TN\",\r\n    \"Vietnam\" : \"VN\",\r\n    \"Brunei\" : \"BN\",\r\n    \"Diamond Princess\" : \"US\",\r\n    \"Faeroe Islands\" : \"FO\",\r\n    \"Palestine\" : \"PS\",\r\n    \"Moldova\" : \"MD\",\r\n    \"Venezuela\" : \"VE\",\r\n    \"Bolivia\" : \"BO\",\r\n    \"Channel Islands\" : \"GB\",\r\n    \"DRC\" : \"CD\",\r\n    \"Ivory Coast\" : \"CI\",\r\n    \"St. Barth\" : \"BL\",\r\n    \"Saint Martin\" : \"MF\",\r\n    \"Tanzania\" : \"TZ\",\r\n    \"U.S. Virgin Islands\" : \"US\",\r\n    \"CAR\" : \"CF\",\r\n    \"Vatican City\" : \"VA\",\r\n    \"St. Vincent Grenadines\" : \"VC\",\r\n    \"Sint Maarten\" : \"SX\",\r\n  }\r\n  \r\nconst getCountry = (country) => {\r\n    console.log(missingCountries[country]);\r\n    return getCode(country) !== undefined ? getCode(country) : missingCountries[country];\r\n}\r\n\r\nconst CardList = ({ countryData }) => {\r\n    return (\r\n        <div className=\"card-list-container\">\r\n        {  \r\n            countryData.map((countries, index) => {\r\n                return(\r\n                    <CountryCard\r\n                    key={index}\r\n                    country={countries.country} \r\n                    activeCases={countries.active}\r\n                    todayCases={countries.todayCases}\r\n                    totalCases={countries.cases}\r\n                    deaths={countries.deaths}\r\n                    todayDeaths={countries.todayDeaths}\r\n                    recoveredCases={countries.recovered}\r\n                    critical={countries.critical}\r\n                    imageSrc={`https://www.countryflags.io/${getCountry(countries.country)}/flat/64.png`}\r\n                    />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport \"./search.css\";\r\n\r\n\r\nconst SearchForm = ({ handleSearch }) => {\r\nreturn (\r\n    // <div className=\"search-container\">\r\n    //     <input onChange={handleSearch} placeholder=\"Search by country\"/>\r\n    // </div>\r\n    \r\n    <form className=\"search-container form-inline d-flex justify-content-center md-form form-sm mt-0\">\r\n        <i className=\"fas fa-search\" aria-hidden=\"true\" />\r\n        <input onChange={handleSearch} className=\"form-control form-control-sm ml-3 w-75\" type=\"text\" placeholder=\"Search by Country\" aria-label=\"Search\" />\r\n      </form>\r\n    \r\n    );\r\n}\r\n\r\nexport default SearchForm;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './components/cardList/cardList.component';\nimport Loader from 'react-loader-spinner';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SearchForm from './components/search/SearchForm';\nimport Moment from 'react-moment';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      countryData: [],\n      totalCases: 0,\n      totalDeaths: 0,\n      totalRecovered: 0,\n      updatedTime: 0,\n      searchItem: \"\"  \n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://corona.lmao.ninja/v2/countries\")\n    .then(response => response.json())\n    .then(data => {\n      this.setState({ countryData: data })\n    })\n    fetch(\"https://corona.lmao.ninja/v2/all\")\n    .then(response => response.json())\n    .then(data => {\n      this.setState({ totalCases: data.cases,\n                      totalDeaths: data.deaths,\n                      totalRecovered: data.recovered,\n                      updatedTime: data.updated,\n      })\n    })\n  }\n\n  handleSearch = (e) => {\n    this.setState({searchItem: e.target.value});\n  }\n\nrender(){\n  const unixTimestamp = this.state.updatedTime.toString().slice(0, -3);\n\n  const filterData = this.state.countryData.filter(countries => {\n      return countries.country.toLowerCase().includes(this.state.searchItem.toLowerCase())});\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Covid19 Tracker</h1>\n        <div className=\"update_time\">\n        <i style={{paddingRight: \"20px\"}} className=\"fas fa-sync-alt\"></i>\n        <Moment unix>{unixTimestamp}</Moment> \n        </div>\n        <SearchForm handleSearch={this.handleSearch}/>\n      </header>\n      <div className=\"content_cards\">\n      <div className=\"update_container\">\n        <div className=\"flex_update\">  \n          <div className=\"box confirmed\">\n          <h3>Confirmed cases</h3>\n            <h4>{this.state.totalCases}</h4>\n          </div>\n\n          <div className=\"box recovered\">\n            <h3>Recovered cases</h3>\n            <h4>{this.state.totalRecovered}</h4>\n          </div>\n\n          <div className=\"box deaths\">\n            <h3>Deaths cases</h3>\n            <h4>{this.state.totalDeaths}</h4>\n          </div>\n        </div>  \n      </div>\n\n   \n      {\n          this.state.countryData.length === 0 ? <Loader type=\"ThreeDots\" color=\"gray\" height={100} width={100} timeout={3000} /> : (\n            <React.Fragment>\n              <CardList countryData={filterData}/>\n            </React.Fragment>  \n          )\n        }\n      </div>    \n    </div>\n   );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}